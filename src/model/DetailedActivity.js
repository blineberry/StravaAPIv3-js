/*
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ActivityType', 'model/DetailedSegmentEffort', 'model/Lap', 'model/LatLng', 'model/MetaAthlete', 'model/PhotosSummary', 'model/PolylineMap', 'model/Split', 'model/SummaryActivity', 'model/SummaryGear'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./ActivityType'), require('./DetailedSegmentEffort'), require('./Lap'), require('./LatLng'), require('./MetaAthlete'), require('./PhotosSummary'), require('./PolylineMap'), require('./Split'), require('./SummaryActivity'), require('./SummaryGear'));
  } else {
    // Browser globals (root is window)
    if (!root.StravaApiV3) {
      root.StravaApiV3 = {};
    }
    root.StravaApiV3.DetailedActivity = factory(root.StravaApiV3.ApiClient, root.StravaApiV3.ActivityType, root.StravaApiV3.DetailedSegmentEffort, root.StravaApiV3.Lap, root.StravaApiV3.LatLng, root.StravaApiV3.MetaAthlete, root.StravaApiV3.PhotosSummary, root.StravaApiV3.PolylineMap, root.StravaApiV3.Split, root.StravaApiV3.SummaryActivity, root.StravaApiV3.SummaryGear);
  }
}(this, function(ApiClient, ActivityType, DetailedSegmentEffort, Lap, LatLng, MetaAthlete, PhotosSummary, PolylineMap, Split, SummaryActivity, SummaryGear) {
  'use strict';

  /**
   * The DetailedActivity model module.
   * @module model/DetailedActivity
   * @version 3.0.0
   */

  /**
   * Constructs a new <code>DetailedActivity</code>.
   * @alias module:model/DetailedActivity
   * @class
   * @implements module:model/SummaryActivity
   */
  var exports = function() {
    SummaryActivity.call(this);
  };

  /**
   * Constructs a <code>DetailedActivity</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DetailedActivity} obj Optional instance to populate.
   * @return {module:model/DetailedActivity} The populated <code>DetailedActivity</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      SummaryActivity.constructFromObject(data, obj);
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('photos'))
        obj.photos = PhotosSummary.constructFromObject(data['photos']);
      if (data.hasOwnProperty('gear'))
        obj.gear = SummaryGear.constructFromObject(data['gear']);
      if (data.hasOwnProperty('calories'))
        obj.calories = ApiClient.convertToType(data['calories'], 'Number');
      if (data.hasOwnProperty('segment_efforts'))
        obj.segmentEfforts = ApiClient.convertToType(data['segment_efforts'], [DetailedSegmentEffort]);
      if (data.hasOwnProperty('device_name'))
        obj.deviceName = ApiClient.convertToType(data['device_name'], 'String');
      if (data.hasOwnProperty('embed_token'))
        obj.embedToken = ApiClient.convertToType(data['embed_token'], 'String');
      if (data.hasOwnProperty('splits_metric'))
        obj.splitsMetric = ApiClient.convertToType(data['splits_metric'], [Split]);
      if (data.hasOwnProperty('splits_standard'))
        obj.splitsStandard = ApiClient.convertToType(data['splits_standard'], [Split]);
      if (data.hasOwnProperty('laps'))
        obj.laps = ApiClient.convertToType(data['laps'], [Lap]);
      if (data.hasOwnProperty('best_efforts'))
        obj.bestEfforts = ApiClient.convertToType(data['best_efforts'], [DetailedSegmentEffort]);
    }
    return obj;
  }

  /**
   * The description of the activity
   * @member {String} description
   */
  exports.prototype.description = undefined;

  /**
   * @member {module:model/PhotosSummary} photos
   */
  exports.prototype.photos = undefined;

  /**
   * @member {module:model/SummaryGear} gear
   */
  exports.prototype.gear = undefined;

  /**
   * The number of kilocalories consumed during this activity
   * @member {Number} calories
   */
  exports.prototype.calories = undefined;

  /**
   * @member {Array.<module:model/DetailedSegmentEffort>} segmentEfforts
   */
  exports.prototype.segmentEfforts = undefined;

  /**
   * The name of the device used to record the activity
   * @member {String} deviceName
   */
  exports.prototype.deviceName = undefined;

  /**
   * The token used to embed a Strava activity
   * @member {String} embedToken
   */
  exports.prototype.embedToken = undefined;

  /**
   * The splits of this activity in metric units (for runs)
   * @member {Array.<module:model/Split>} splitsMetric
   */
  exports.prototype.splitsMetric = undefined;

  /**
   * The splits of this activity in imperial units (for runs)
   * @member {Array.<module:model/Split>} splitsStandard
   */
  exports.prototype.splitsStandard = undefined;

  /**
   * @member {Array.<module:model/Lap>} laps
   */
  exports.prototype.laps = undefined;

  /**
   * @member {Array.<module:model/DetailedSegmentEffort>} bestEfforts
   */
  exports.prototype.bestEfforts = undefined;

  // Implement SummaryActivity interface:
  /**
   * The unique identifier of the activity
   * @member {Number} id
   */
  exports.prototype.id = undefined;

  /**
   * The identifier provided at upload time
   * @member {String} externalId
   */
  exports.prototype.externalId = undefined;

  /**
   * The identifier of the upload that resulted in this activity
   * @member {Number} uploadId
   */
  exports.prototype.uploadId = undefined;

  /**
   * @member {module:model/MetaAthlete} athlete
   */
  exports.prototype.athlete = undefined;

  /**
   * The name of the activity
   * @member {String} name
   */
  exports.prototype.name = undefined;

  /**
   * The activity's distance, in meters
   * @member {Number} distance
   */
  exports.prototype.distance = undefined;

  /**
   * The activity's moving time, in seconds
   * @member {Number} movingTime
   */
  exports.prototype.movingTime = undefined;

  /**
   * The activity's elapsed time, in seconds
   * @member {Number} elapsedTime
   */
  exports.prototype.elapsedTime = undefined;

  /**
   * The activity's total elevation gain.
   * @member {Number} totalElevationGain
   */
  exports.prototype.totalElevationGain = undefined;

  /**
   * The activity's highest elevation, in meters
   * @member {Number} elevHigh
   */
  exports.prototype.elevHigh = undefined;

  /**
   * The activity's lowest elevation, in meters
   * @member {Number} elevLow
   */
  exports.prototype.elevLow = undefined;

  /**
   * @member {module:model/ActivityType} type
   */
  exports.prototype.type = undefined;

  /**
   * The time at which the activity was started.
   * @member {Date} startDate
   */
  exports.prototype.startDate = undefined;

  /**
   * The time at which the activity was started in the local timezone.
   * @member {Date} startDateLocal
   */
  exports.prototype.startDateLocal = undefined;

  /**
   * The timezone of the activity
   * @member {String} timezone
   */
  exports.prototype.timezone = undefined;

  /**
   * @member {module:model/LatLng} startLatlng
   */
  exports.prototype.startLatlng = undefined;

  /**
   * @member {module:model/LatLng} endLatlng
   */
  exports.prototype.endLatlng = undefined;

  /**
   * The number of achievements gained during this activity
   * @member {Number} achievementCount
   */
  exports.prototype.achievementCount = undefined;

  /**
   * The number of kudos given for this activity
   * @member {Number} kudosCount
   */
  exports.prototype.kudosCount = undefined;

  /**
   * The number of comments for this activity
   * @member {Number} commentCount
   */
  exports.prototype.commentCount = undefined;

  /**
   * The number of athletes for taking part in a group activity
   * @member {Number} athleteCount
   */
  exports.prototype.athleteCount = undefined;

  /**
   * The number of Instagram photos for this activity
   * @member {Number} photoCount
   */
  exports.prototype.photoCount = undefined;

  /**
   * The number of Instagram and Strava photos for this activity
   * @member {Number} totalPhotoCount
   */
  exports.prototype.totalPhotoCount = undefined;

  /**
   * @member {module:model/PolylineMap} map
   */
  exports.prototype.map = undefined;

  /**
   * Whether this activity was recorded on a training machine
   * @member {Boolean} trainer
   */
  exports.prototype.trainer = undefined;

  /**
   * Whether this activity is a commute
   * @member {Boolean} commute
   */
  exports.prototype.commute = undefined;

  /**
   * Whether this activity was created manually
   * @member {Boolean} manual
   */
  exports.prototype.manual = undefined;

  /**
   * Whether this activity is private
   * @member {Boolean} _private
   */
  exports.prototype._private = undefined;

  /**
   * Whether this activity is flagged
   * @member {Boolean} flagged
   */
  exports.prototype.flagged = undefined;

  /**
   * The activity's workout type
   * @member {Number} workoutType
   */
  exports.prototype.workoutType = undefined;

  /**
   * The unique identifier of the upload in string format
   * @member {String} uploadIdStr
   */
  exports.prototype.uploadIdStr = undefined;

  /**
   * The activity's average speed, in meters per second
   * @member {Number} averageSpeed
   */
  exports.prototype.averageSpeed = undefined;

  /**
   * The activity's max speed, in meters per second
   * @member {Number} maxSpeed
   */
  exports.prototype.maxSpeed = undefined;

  /**
   * Whether the logged-in athlete has kudoed this activity
   * @member {Boolean} hasKudoed
   */
  exports.prototype.hasKudoed = undefined;

  /**
   * The id of the gear for the activity
   * @member {String} gearId
   */
  exports.prototype.gearId = undefined;

  /**
   * The total work done in kilojoules during this activity. Rides only
   * @member {Number} kilojoules
   */
  exports.prototype.kilojoules = undefined;

  /**
   * Average power output in watts during this activity. Rides only
   * @member {Number} averageWatts
   */
  exports.prototype.averageWatts = undefined;

  /**
   * Whether the watts are from a power meter, false if estimated
   * @member {Boolean} deviceWatts
   */
  exports.prototype.deviceWatts = undefined;

  /**
   * Rides with power meter data only
   * @member {Number} maxWatts
   */
  exports.prototype.maxWatts = undefined;

  /**
   * Similar to Normalized Power. Rides with power meter data only
   * @member {Number} weightedAverageWatts
   */
  exports.prototype.weightedAverageWatts = undefined;

  return exports;

}));
